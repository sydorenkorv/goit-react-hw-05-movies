{"version":3,"file":"static/js/459.779ca980.chunk.js","mappings":"iRACA,EAAuB,mBAAvB,EAAiD,mBAAjD,EAA0E,kBAA1E,EAAmG,mB,SC2DnG,MArDA,WACE,OAAkCA,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAuBR,OArBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAS,mCAAG,WAAMC,GAAN,uFAEdP,GAAa,GAFC,UAGeQ,EAAAA,EAAAA,IAAQD,GAHvB,OAGRE,EAHQ,OAIdX,EAAaW,GAJC,gDAMdP,EAAS,KAAIQ,SANC,yBAQdV,GAAa,GARC,4EAAH,sDAWfM,EAAUH,EAZU,CAarB,GAAE,CAACA,KAEJE,EAAAA,EAAAA,YAAU,WACM,OAAVJ,GACJU,EAAAA,OAAAA,QAAA,6BAAqCV,GACtC,GAAE,CAACA,KAGF,gCACGF,IAAa,SAACa,EAAA,EAAD,KACd,eAAIC,UAAWC,EAAf,SACGC,MAAMC,QAAQnB,KAAd,OACCA,QADD,IACCA,OADD,EACCA,EAAWoB,KAAI,YAAiC,IAA9BV,EAA6B,EAA7BA,GAAIW,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAC1B,OACE,gBAAaN,UAAWC,EAAxB,WACE,gBACED,UAAWC,EACXM,IACED,EAAY,yCAC0BA,GAClC,qEAENE,IAAKH,KAEP,eAAIL,UAAWC,EAAf,SAA0BI,MAVnBX,EAaZ,SAIV,C","sources":["webpack://react-homework-template/./src/pages/Cast/Cast.module.css?cfbb","pages/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__oOD41\",\"item\":\"Cast_item__vxHbm\",\"img\":\"Cast_img__uVPra\",\"name\":\"Cast_name__y8nr9\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Notify } from 'notiflix';\nimport { getCast } from 'api/api';\nimport { Loader } from 'components/Loader/Loader';\nimport css from './Cast.module.css';\n\nfunction Cast() {\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    const fetchCast = async id => {\n      try {\n        setIsLoading(true);\n        const receivedTrends = await getCast(id);\n        setMovieCast(receivedTrends);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCast(movieId);\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error === null) return;\n    Notify.failure(`some error occured ${error}`);\n  }, [error]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <ul className={css.list}>\n        {Array.isArray(movieCast) &&\n          movieCast?.map(({ id, name, profile_path }) => {\n            return (\n              <li key={id} className={css.item}>\n                <img\n                  className={css.img}\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                      : 'https://upload.wikimedia.org/wikipedia/commons/2/2f/No-photo-m.png'\n                  }\n                  alt={name}\n                />\n                <h4 className={css.name}>{name}</h4>\n              </li>\n            );\n          })}\n      </ul>\n    </>\n  );\n}\n\nexport default Cast;\n"],"names":["useState","movieCast","setMovieCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchCast","id","getCast","receivedTrends","message","Notify","Loader","className","css","Array","isArray","map","name","profile_path","src","alt"],"sourceRoot":""}