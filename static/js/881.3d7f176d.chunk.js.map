{"version":3,"file":"static/js/881.3d7f176d.chunk.js","mappings":"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","sources":["api/api.js","webpack://react-homework-template/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.jsx","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst moviesAPI = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '8bd78ee11f1297c9482ff7b548a73f20',\n    language: 'en-US',\n    include_adult: false,\n  },\n});\n\nexport const getTrends = async () => {\n  const { data } = await moviesAPI.get('/trending/movie/week');\n  return data.results;\n};\n\nexport const getMoviesByQuery = async query => {\n  const { data } = await moviesAPI.get('/search/movie', {\n    params: { query },\n  });\n  return data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await moviesAPI.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getCast = async id => {\n  const { data } = await moviesAPI.get(`/movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n    const { data } = await moviesAPI.get(`/movie/${id}/reviews`);\n    return data.results;\n};","// extracted by mini-css-extract-plugin\nexport default {\"movieList\":\"MovieList_movieList__uFrOZ\",\"movieLink\":\"MovieList_movieLink__kzavH\",\"movieTitle\":\"MovieList_movieTitle__RhENm\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport css from './MovieList.module.css';\n\nexport const MovieList = ({ movieList }) => {\n  const location = useLocation();\n  return (\n    <ul className={css.movieList}>\n      {Array.isArray(movieList) &&\n        movieList?.map(({ id, name, title, poster_path }) => {\n          return (\n            <Link\n              className={css.movieLink}\n              state={{ from: location }}\n              key={id}\n              to={`/movies/${id}`}\n            >\n              <img\n                src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                alt={title}\n                style={{ width: 200 }}\n              />\n              <p className={css.movieTitle}>{name || title}</p>\n            </Link>\n          );\n        })}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movieList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      name: PropTypes.string,\n      title: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Movies_form__4ow+Z\",\"input\":\"Movies_input__KrUqs\",\"btn\":\"Movies_btn__TlfBQ\"};","import { useEffect, useState } from 'react';\nimport { getMoviesByQuery } from 'api/api';\nimport { Notify } from 'notiflix';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { FaSearch } from 'react-icons/fa';\nimport css from './Movies.module.css';\n\nfunction Movies() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query?.trim()) return;\n    const fetchTrends = async query => {\n      try {\n        setIsLoading(true);\n        const receivedMovies = await getMoviesByQuery(query);\n        if (receivedMovies.length === 0) {\n          Notify.info(`No results for ${query}`);\n        }\n        setMovies(receivedMovies);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTrends(query);\n  }, [query]);\n\n  useEffect(() => {\n    if (error === null) return;\n    Notify.failure(`some error occured ${error}`);\n  }, [error]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (e.currentTarget.search.value === '') {\n      Notify.warning('The input field is empty!');\n    }\n    setSearchParams({ query: e.currentTarget.search.value });\n    e.target.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <input name=\"search\" className={css.input} placeholder=\"search...\" />\n        <button type=\"submit\" className={css.btn}>\n          <FaSearch />\n        </button>\n      </form>\n      {isLoading && <Loader />}\n      <MovieList movieList={movies} />\n    </>\n  );\n}\n\nexport default Movies;\n"],"names":["moviesAPI","axios","baseURL","params","api_key","language","include_adult","getTrends","get","data","results","getMoviesByQuery","query","getMovieDetails","id","getCast","cast","getReviews","MovieList","movieList","location","useLocation","className","css","Array","isArray","map","name","title","poster_path","state","from","to","src","alt","style","width","useState","movies","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","useEffect","trim","fetchTrends","receivedMovies","length","Notify","message","onSubmit","e","preventDefault","currentTarget","search","value","target","reset","placeholder","type","Loader"],"sourceRoot":""}